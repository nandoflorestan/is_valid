#! /usr/bin/env python3
"""Concatenate files from is_valid/ creating ``valid.py``."""

from pathlib import Path

adir = Path("is_valid").resolve()
paths = [
    adir / "explanation.py",
    adir / "get.py",
    adir / "base.py",
    adir / "is_eq.py",
    adir / "to_pred.py",
    adir / "is_fixed.py",
    adir / "is_with.py",
    adir / "is_with_context.py",
    adir / "utils.py",
    adir / "is_instance.py",
    adir / "is_str.py",
    adir / "is_fixed.py",
    adir / "is_dict.py",
    adir / "is_transformed.py",
    adir / "is_int.py",
    adir / "is_bytes.py",
    adir / "is_decodable_where.py",
    adir / "is_something.py",
    adir / "is_iterable.py",
    adir / "is_iterable_of.py",
    adir / "is_geq.py",
    adir / "is_leq.py",
    adir / "is_in_range.py",
    adir / "is_json_where.py",
    adir / "is_nothing.py",
    adir / "is_dict_where.py",
    adir / "is_in.py",
    adir / "is_superdict_where.py",
    adir / "is_subdict_where.py",
    adir / "is_not.py",
]
manual = paths + [adir / "__init__.py"]
paths.extend(sorted((f for f in adir.iterdir() if f not in manual)))
paths.append(adir / "__init__.py")

PREAMBLE = '''\
"""Concatenation of files in the directory is_valid/. Autogenerated."""
from collections import defaultdict
from datetime import datetime, date, time, timedelta
import json
import re'''

with open("transvalid.py", "w", encoding="utf-8") as outfile:
    outfile.write(PREAMBLE)
    for path in paths:
        with open(path, "r", encoding="utf-8") as infile:
            outfile.write("\n##### {}\n".format(str(path).split("/")[-1]))
            for line in infile:
                if line.strip().startswith("from ") or line.startswith(
                    "import "
                ):
                    continue
                outfile.write(line)

if __name__ == '__main__':
    import transvalid  # to spit a stacktrace if there is a problem
